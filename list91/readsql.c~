#include <stdio.h>
#include <stdlib.h>
#include <mysql.h>
#include <string.h>
#include "account.h"
#include "get.h"
#include "emp.h"
#include "policy.h"

#define SQL_SERVER "192.168.1.55"
#define SQL_NAME_BASE "baseconfig"
#define SQL_NAME_AUDIT "audit"
#define SQL_USER "fuyou"
#define SQL_PWD  "123456"


static MYSQL *db_handel,mysql;
static MYSQL_ROW row;
static int query_error;

MYSQL_RES *sql_query(char *sql);
int sql_res(MYSQL_RES *result);

MYSQL_RES *sql_query(char *sql)
{
        static MYSQL_RES *query_result;
        printf("%s\n",sql);
        mysql_init(&mysql);
        db_handel=mysql_real_connect(&mysql,SQL_SERVER,SQL_USER,SQL_PWD,SQL_NAME_BASE,0,0,0);
        if(db_handel==NULL)
        {
                printf(mysql_error(&mysql));
                return NULL;
        }

        query_error=mysql_query(db_handel,sql);
        if(query_error!=0)
        {
                printf(mysql_error(db_handel));
                return NULL;
        }
        query_result=mysql_store_result(db_handel);
        mysql_close(db_handel);
        return query_result;
}

int sql_res(MYSQL_RES *result)
{
        unsigned int i,num_fields;
        MYSQL_FIELD *fileds;
        num_fields=mysql_num_fields(result);
        fileds=mysql_fetch_fields(result);
        while((row=mysql_fetch_row(result))!=NULL)
        {
                for(i=0;i<num_fields;i++)
                {
                        printf("%s: %s \n",fileds[i].name,row[i]?row[i]:"NULL");
                }
        }
        return 0;
}
void sql_readcardtype()
{
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	u32 i=0;
	results = sql_query("select name,type from cardinfo");
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query cardinfo error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{

		for(i=0;i<MAX_DEVNUM;i++)
		{
			if_setphydevtype(row[0],atoi(row[1]));
		}
	}
}
void sql_readglobalpara()
{
#define GBL_ISQOSOPEN 		atoi(row[0])
#define GBL_ISPROLOGOPEN 		atoi(row[1])
#define GBL_ISTIMEOPEN 		atoi(row[2])
#define GBL_ISIPMACBIND		atoi(row[3])
#define GBL_SYSTEMMODE 		atoi(row[4])
#define GBL_WEEK 				atoi(row[5])
#define GBL_TIMES1 			atoi(row[6])
#define GBL_TIMEE1 			atoi(row[7])
#define GBL_TIMES2 			atoi(row[8])
#define GBL_TIMEE2 			atoi(row[9])
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	results = sql_query("select * from globalpara");
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query global para error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		g_isqosopen = GBL_ISQOSOPEN;
		log_setprologflag(GBL_ISPROLOGOPEN);
		g_sysmode = GBL_SYSTEMMODE;
		g_isipmacbind = GBL_ISIPMACBIND;
		emp_settimescope(GBL_ISTIMEOPEN,GBL_WEEK,GBL_TIMES1,GBL_TIMEE1,GBL_TIMES2,GBL_TIMEE2);
	}
}
void sql_readbwhost()
{
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	results = sql_query("select * from specweb");
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query useraccount error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		TBwhost bw;
		strcpy(bw.host,row[0]);
		bw.val = atoi(row[1]);
	}
}
void sql_readuseraccount()
{
#define ACC_NAME				row[0]
#define ACC_PASSWD			row[1]
#define ACC_GROUPID			atoi(row[2])
#define ACC_PERSONID			atoi(row[3])
#define ACC_BINDIP			atoi(row[4])
#define ACC_ONPOLICYID		atoi(row[5])
#define ACC_OFFPOLICYID		atoi(row[6])
#define ACC_ISSMTPLOG		atoi(row[7])
#define ACC_ISPOP3LOG		atoi(row[8])
#define ACC_ISPOSTLOG		atoi(row[9])
#define ACC_ISWEBMAILLOG		atoi(row[10])
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	results = sql_query("select * from useraccount");
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query useraccount error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		TAccount acc;
		acc.usedip = 0;
		strcpy(acc.name,ACC_NAME);
		strcpy(acc.passwd,ACC_PASSWD);
		acc.groupid = ACC_GROUPID;
		acc.personid = ACC_PERSONID;
		acc.bindip = ACC_BINDIP;
		acc.onpolicyid = ACC_ONPOLICYID;
		acc.offpolicyid = ACC_OFFPOLICYID;
		acc.issmtplog = ACC_ISSMTPLOG;
		acc.ispop3log = ACC_ISPOP3LOG;
		acc.ispostlog = ACC_ISPOSTLOG;
		acc.iswebmaillog = ACC_ISWEBMAILLOG;
		
		acc_addbdbaccount(&acc);		
	}
}
u32 sql_readuserip(u32 ip,TEmployee* p)
{
#define IP_MAC 				row[1]
#define IP_IPMACBIND 			atoi(row[2])
#define IP_NAME 				row[3]
#define IP_GROUPID 			atoi(row[4]) 
#define IP_PERSONID 			atoi(row[5])
#define IP_ONPOLICYID 		atoi(row[6])
#define IP_OFFPOLICYID 		atoi(row[7])
#define IP_SPECIP 				atoi(row[8])
#define IP_ISSMTPLOG 			atoi(row[9])
#define IP_ISPOP3LOG 			atoi(row[10])
#define IP_ISPOSTLOG 			atoi(row[11])
#define IP_ISWEBMAILLOG 		atoi(row[12])
	u32 rownum = 0;
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	char buf[200];
	sprintf(buf,"select * from userip where ip=%d",ip);
	results = sql_query(buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query userip error %d\n",ip);
		return;
	}
//	fileds= mysql_fetch_fields(results);
	if(0 == (rownum=mysql_num_rows(results)))
	{
		return 0;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		p->ip = htonl(ip);
		p->mode = SYS_IP;
		p->account[0] = '\0';
		p->activetime = 0;
		p->onpolicyid = IP_ONPOLICYID;
		p->offpolicyid = IP_OFFPOLICYID;
		p->specip = IP_SPECIP;
		p->smtp = IP_ISSMTPLOG;
		p->pop3 = IP_ISPOP3LOG;
		p->post = IP_ISPOSTLOG;
		p->webmail = IP_ISWEBMAILLOG;
		p->personid = IP_PERSONID;
		p->groupid = IP_GROUPID;
	}
	return rownum;
}
void sql_readpolicy(u32 polid)
{
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	char buf[200];
	sprintf(buf,"select * from proinfo where policyid =%d order by proid",polid);
	results = sql_query(buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query proid error %d\n",polid);
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		g_policy[polid].pro[atoi(row[1])].pass = atoi(row[2]);
	}
	sprintf(buf,"select * from webinfo where policyid =%s order by webid",polid);
	results = sql_query(buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query webinfo error %d\n",polid);
		return;
	}

	while((row = mysql_fetch_row(results))!=NULL)
	{
		g_policy[polid].web[atoi(row[1])].pass = atoi(row[2]);
		g_policy[polid].web[atoi(row[1])].log = atoi(row[3]);
	}
	sprintf(buf,"select * from fileinfo where policyid=%d order by fileid");
	results = sql_query(buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query file error %d\n",polid);
		return;
	}

	while((row = mysql_fetch_row(results))!=NULL)
	{
		g_policy[polid].filetype[atoi(row[1])].pass = atoi(row[2]);
		g_policy[polid].filetype[atoi(row[1])].log = atoi(row[3]);
	}
}
void sql_readallpolicy()
{
	u32 i =0 ;
	for(i=0;i<MAX_POLICY;i++)
	{
		sql_readpolicy(i);
	}
	return;
}

/*int main(int argc,char *argv[])
{
        MYSQL_RES * results;
        results=sql_query(DB_SQL_EMAIL_FILTER);
        query_show(results);
        return 0;
}*/
