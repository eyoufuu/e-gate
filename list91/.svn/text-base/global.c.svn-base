/*File: global.c
    Copyright 2009 10 LINZ CO.,LTD
    Author(s): fuyou (a45101821@gmail.com)
 */
#include "global.h"

TTime* g_ptm = NULL;

u32 g_debuglevel = D_ALL;

u32 g_wanindex = 0;
u32 g_lanindex = 0;
TPktinfo g_pkt;
u8 g_mac[20];

u32 g_isqosopen = 0;
u32 g_sysmode = SYS_IP;
u32 g_isipmacbind = 0;
u32 g_gate = 1;

TModule g_modules[20];

u32 g_localip = 0;
u8 g_localipstr[24]="\0";

u8 g_TempBuffer[MAX_TEMP_BUFFER];
u32 	g_inssum;

TMutex g_ipmutex[MAX_IP][MAX_NETSEG];


//得到tcp包和udp包的偏移量
inline get_ip_pack_h_len(const unsigned char *data)
{
	return 4*(data[0] & 0x0f);
}
inline get_tcp_pack_h_len(const unsigned char *data)
{
	int ip_hl = get_ip_pack_h_len(data);
	return 4*(data[ip_hl + 12]>>4);
}
/*
int app_data_offset(const unsigned char *data,char ip_protocol)
{
  int ip_hl = get_ip_pack_h_len(data);

  if(ip_protocol == 1){
    // 12 == offset into TCP header for the header length field.
    int tcp_hl = 4*(data[ip_hl + 12]>>4);
    return ip_hl + tcp_hl;
  }
  else if(ip_protocol == 0)//udp
	  return ip_hl+8;
  else //we can not regonize the package is tcp or udp
	  return ip_hl+8;
}
*/
void init_ipmutex()
{
	u32 i = 0;
	u32 j=0;
	for(i=0;i<MAX_IP;i++)
	{
		for(j=0;j<MAX_NETSEG;j++)
		{
			if(0 != pthread_mutex_init(&(g_ipmutex[i][j].mutex),NULL))
			{
				DEBUG(D_FATAL)("init mutex error \n");
			}
		}		
	}
}

void uninit_ipmutex()
{
	u32 i = 0;
	u32 j = 0;
	for(i=0;i<MAX_IP;i++)
	{
		for(j=0;j<MAX_NETSEG;j++)
		{
			if(0 != pthread_mutex_destroy(&(g_ipmutex[i][j].mutex)))
			{
				DEBUG(D_FATAL)("uninit mutex error \n");
			}
		}
	}
}

#define DEBUG_PATH "./logfile"

void getdate(char* date,int datelen) 
{
//	if(g_ptm != NULL)
	{
		strftime(date,datelen,"%Y-%m-%d ",&(g_ptm->curdate));
	}
}	
void gettime(char* time,int timelen) 
{ 
//	if(g_ptm != NULL)
	{
		strftime(time,timelen,"%H:%M:%S",&(g_ptm->curdate)); 
	}	
}
void write_debug_log(const char *fmt, ...)
{
	FILE *logfp;
	va_list ap;
	char d[50],t[50];
	static int count = 0;
	logfp=fopen(DEBUG_PATH,"a+t");
	if(logfp==NULL)
	{
		return;
	}

	va_start(ap, fmt);
	getdate(d,50);
	gettime(t,50);

	fprintf(logfp,"%s %s\t", d,t);
	vfprintf(logfp,fmt,ap);
	va_end(ap);
	count++;
	if(count == 2000)
	{
		count = 0;
		system("rm -f logfile");
	}
	fclose(logfp);
}



