/*File: readsql.c
    Copyright 2009 10 LINZ CO.,LTD
    Author(s): fuyou (a45101821@gmail.com)
 */
#include "readsql.h"

#define SQL_SERVER "127.0.0.1"
#define SQL_NAME_BASE "baseconfig"
#define SQL_NAME_AUDIT "audit"
#define SQL_USER "root"
#define SQL_PWD  "123456"


static MYSQL *db_handel,mysql;
static MYSQL_ROW row;
static int query_error;

MYSQL_RES *sql_query(char* dbname,char *sql);
int sql_res(MYSQL_RES *result);

MYSQL_RES *sql_query(char* dbname,char *sql)
{
        static MYSQL_RES *query_result;
        mysql_init(&mysql);
        db_handel=mysql_real_connect(&mysql,SQL_SERVER,SQL_USER,SQL_PWD,dbname,0,0,0);
        if(db_handel==NULL)
        {
                printf(mysql_error(&mysql));
                return NULL;
        }

        query_error=mysql_query(db_handel,sql);
        if(query_error!=0)
        {
                printf(mysql_error(db_handel));
                return NULL;
        }
        query_result=mysql_store_result(db_handel);
        mysql_close(db_handel);
        return query_result;
}

int sql_res(MYSQL_RES *result)
{
        unsigned int i,num_fields;
        MYSQL_FIELD *fileds;
        num_fields=mysql_num_fields(result);
        fileds=mysql_fetch_fields(result);
        while((row=mysql_fetch_row(result))!=NULL)
        {
                for(i=0;i<num_fields;i++)
                {
                        printf("%s: %s \n",fileds[i].name,row[i]?row[i]:"NULL");
                }
        }
        return 0;
}
   

void sql_createprolog(u8* name)
{
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	u32 i=0;
	u8 buf[500];
	sprintf(buf,"%s %s %s",TABLE_DEFINE_CMD_CREATE,name,TABLE_DEFINE_PRO_CONTENT);
	sql_query(SQL_NAME_AUDIT,buf);
}

void sql_readcardtype()
{
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	u32 i=0;
	results = sql_query(SQL_NAME_BASE,"select name,type from cardinfo");
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query cardinfo error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		if_setphydevtype(row[0],atoi(row[1]));
	}
}
void sql_readmodule()
{
#define MODULE_ID           atoi(row[0])
#define MODULE_STATE     atoi(row[1])
#define MODULE_SERVICE atoi(row[2])
        MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
        char buf[200];
	sprintf(buf,"select id,state,service from module where service = %d",0);
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query global para error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
	        g_modules[MODULE_ID].id = MODULE_ID;
                g_modules[MODULE_ID].state = MODULE_STATE;
                g_modules[MODULE_ID].service = MODULE_SERVICE;
	}
}
void sql_readglobalpara()
{
#define GBL_LOGINTERVALTIME     atoi(row[0])
#define GBL_ISQOSOPEN                 atoi(row[1])
#define GBL_GATE				 atoi(row[2])
#define GBL_ISIPMACBIND		 atoi(row[3])
#define GBL_SYSTEMMODE 		 atoi(row[4])

	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	results = sql_query(SQL_NAME_BASE,"select logintervaltime,isqosopen,gate,isipmacbind,systemmode from globalpara");
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query global para error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
	        g_gate = GBL_GATE;
		g_isqosopen = GBL_ISQOSOPEN;
		log2_setintervaltime(GBL_LOGINTERVALTIME);
		g_sysmode = GBL_SYSTEMMODE;
		g_isipmacbind = GBL_ISIPMACBIND;               
	}
}

void sql_readfilecat()
{
#define FILECAT_ID  		atoi(row[0])
#define FILECAT_NAME 		row[1]
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	results = sql_query(SQL_NAME_BASE,"select typeid,name from filecat");
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query filecat error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		filetype_insertftnode(FILECAT_ID,FILECAT_NAME);
	}
/*	int i=0;
	for(i=0;i<MAX_FILETYPE;i++)
	{
		struct hlist_node *pos,*n;
		TFtnode* node;
		hlist_for_each_safe(pos,n,&g_ftlist[i])
		{
			node = hlist_entry(pos,TFtnode,ftnode);
			printf("t=%s\n",node->type);
		}
	}
	printf("%d\n",g_ftnum);*/
}
void sql_readbwhost()
{
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	results = sql_query(SQL_NAME_BASE,"select * from specweb");
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query useraccount error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
                bwhost_add(row[0],atoi(row[1]));		
	}
}
void sql_readalluseraccount()
{
#define ACC_ID				atoi(row[0])
#define ACC_NAME				row[1]
#define ACC_PASSWD			row[2]
#define ACC_GROUPID			atoi(row[3])
#define ACC_PERSONID			atoi(row[4])
#define ACC_BINDIP			atoi(row[5])
#define ACC_POLICYID		atoi(row[6])

	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	results = sql_query(SQL_NAME_BASE,"select * from useraccount");
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query useraccount error\n");
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		TAccount acc;
		acc.usedip = 0;
		acc.groupid = ACC_GROUPID;
		acc.personid = ACC_PERSONID;
		acc.bindip = ACC_BINDIP;
		acc.policyid = ACC_POLICYID;
		
/*		acc.issmtplog = ACC_ISSMTPLOG;
		acc.ispop3log = ACC_ISPOP3LOG;
		acc.ispostlog = ACC_ISPOSTLOG;
		acc.isgetlog = ACC_ISGETLOG;*/
		
		acc_addaccount(ACC_ID,&acc);		
	}
}
u32 sql_readuseaccount(u32 accid)
{
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	u32 rownum = 0;
	char buf[200];
	sprintf(buf,"select * from useraccount where id=%d",accid);
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query useraccount error\n");
		return 0;
	}
	if(0 == (rownum=mysql_num_rows(results)))
	{
		return 0;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		TAccount acc;
		acc.usedip = 0;
		acc.bindip = ACC_BINDIP;

		acc.groupid = ACC_GROUPID;
		acc.personid = ACC_PERSONID;
		
		acc.policyid = ACC_POLICYID;

/*		strcpy(acc.name,ACC_NAME);
		
		acc.issmtplog = ACC_ISSMTPLOG;
		acc.ispop3log = ACC_ISPOP3LOG;
		acc.ispostlog = ACC_ISPOSTLOG;
		acc.isgetlog = ACC_ISGETLOG;*/
		
		acc_addaccount(accid,&acc);		
	}
	return rownum;
}
u32 sql_readallipmac()
{
#define IPMAC_IP			strtoul(row[0],NULL,10)
#define IPMAC_MAC		row[1]
#define IPMAC_BIND 		atoi(row[2])
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	char buf[200];
         u8 strTmp[3];
         u32 i = 0;
	u8 ipmac[12];
	u8 offset = 4;
	sprintf(buf,"select * from ipmac");
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query all user ip error \n");
		return;
	}
//	fileds= mysql_fetch_fields(results);
	while((row = mysql_fetch_row(results))!=NULL)
	{
		*((u32*)ipmac) = __hnl(IPMAC_IP);
		for(i=0;i<6;i++)   
		{   
		        strTmp[0] = IPMAC_MAC[i*3];   
		        strTmp[1] = IPMAC_MAC[i*3+1];   
		        strTmp[2] = 0;   
		        ipmac[offset+i] = strtol(strTmp,NULL,16);
		}
		ipmac[10] = IPMAC_BIND;
		SendKernelMessage((char*)ipmac,0,IMP2_IPMAC,11);
	}		
}
u32 sql_readuserip(u32 ip,TEmployee* p)
{
#define IP_NETSEGID			atoi(row[0])
#define IP_IP					strtoul(row[1],NULL,10)
#define IP_MAC 				row[2]
#define IP_IPMACBIND 			atoi(row[3])
#define IP_NAME 				row[4]
#define IP_GROUPID 			atoi(row[5]) 
#define IP_PERSONID 			atoi(row[6])
#define IP_POLICYID 		        atoi(row[7])
#define IP_SPECIP 				atoi(row[8])

        u8   strTmp[3];
        u32 i = 0;
	u32 rownum = 0;
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	char buf[200];
	sprintf(buf,"select * from userip where ip=%u",ip);
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query userip error %u\n",ip);
		return 0;
	}
//	fileds= mysql_fetch_fields(results);
	if(0 == (rownum=mysql_num_rows(results)))
	{
		return 0;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
                p->ip = __hnl(ip);
                p->mode = SYS_IP;
                p->accid = 0;
                p->activetime = g_ptm->curtime;
                p->policyid = IP_POLICYID;
                p->specip = IP_SPECIP;
                p->personid = IP_PERSONID;
                p->groupid = IP_GROUPID;
		if(IP_MAC !=NULL)
		{
	                for(i=0;i<6;i++)   
	                {   
	                        strTmp[0] = IP_MAC[i*3];   
	                        strTmp[1] = IP_MAC[i*3+1];   
	                        strTmp[2] = 0;   
	                        p->mac[i] = strtol(strTmp,NULL,16);
	                }
		}
	}
	return rownum;
}
void sql_readalluserip()
{
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	char buf[200];
        u8 strTmp[3];
        u32 i = 0;
	sprintf(buf,"select * from userip");
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query all user ip error \n");
		return;
	}
//	fileds= mysql_fetch_fields(results);
	while((row = mysql_fetch_row(results))!=NULL)
	{
		TEmployee emp;
		emp.ip = __hnl(strtoul(row[0],NULL,10));
		emp.mode = SYS_IP;
		emp.accid = 0;
		emp.activetime = g_ptm->curtime;
  /*              if(g_modules[MODULE_POLICY].state == 3)
		{
		        emp.policyid = IP_POLICYID;
                }*/
		emp.specip = atoi(row[5]);
        		emp.personid = 0;
		emp.groupid = 0;
/*		if(IP_MAC != NULL)
		{
			for(i=0;i<6;i++)   
	                {   
	                        strTmp[0] = IP_MAC[i*3];   
	                        strTmp[1] = IP_MAC[i*3+1];   
	                        strTmp[2] = 0;   
	                        emp.mac[i] = strtol(strTmp,NULL,16);
	                }
		}*/
		u16 iphash = GETIPHASH(emp.ip);
		u8 netseghash = GETNETSEGHASH(emp.ip);
		emp_updateempnode(iphash,netseghash,&emp);
		
	}
}

void sql_readnetseg()
{
#define NETSEG_IPS				strtoul(row[0],NULL,10)
#define NETSEG_IPE				strtoul(row[1],NULL,10)
#define NETSEG_SPEC                             atoi(row[2])
#define NETSEG_MONITOR                      atoi(row[3])
#define NETSEG_POLICYID			 atoi(row[4])

	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	char buf[200];
//del old emp node;
        emp_delallempnode();
        
	sprintf(buf,"select ips,ipe,spec,monitor,policyid from netseg");
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query userip netseg \n");
		return;
	}
//	fileds= mysql_fetch_fields(results);
	while((row = mysql_fetch_row(results))!=NULL)
	{
	        if(NETSEG_MONITOR == 1)
                {   
            		u32 i = 0;
            		TEmployee emp;
            		for(i=NETSEG_IPS;i<=NETSEG_IPE;i++)
            		{		
            			emp.ip = __hnl(i);
            			if(likely(g_sysmode == SYS_IP))
            			{
            				emp.mode = SYS_IP;
            			}
            			else
            			{
            				emp.mode = SYS_ACCOUNT;
            			}
            			emp.accid = 0;
            			emp.activetime = g_ptm->curtime;
                                emp.policyid = 0;
                                if(g_modules[MODULE_POLICY].state == 3)
                                {
            			    emp.policyid = NETSEG_POLICYID;            			
                                }
                        	emp.personid = 0;
            			emp.groupid = 0;
                                emp.specip = NETSEG_SPEC;
                     		u16 iphash = GETIPHASH(emp.ip);
            			u8 netseghash = GETNETSEGHASH(emp.ip);

            			LOCK_IP(iphash,netseghash);
            			emp_addempnode(iphash,netseghash,&emp);
            			UNLOCK_IP(iphash,netseghash);
                      }
    		}
	}
}
void sql_readpolicy(u32 polid)
{
	MYSQL_RES * results;
	MYSQL_FIELD *fileds;
	u32 num_fileds;
	char buf[200];
        sprintf(buf,"select proctl,webfilter,filetypefilter,keywordfilter,smtpaudit,pop3audit,postaudit,time,\
                week,times1,timee1,times2,timee2 from policy where policyid =%d",polid);
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query proid error %d\n",polid);
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		pol_setproctl(polid,atoi(row[0]));
		pol_setwebfilter(polid,atoi(row[1]));
		pol_setfiletypefilter(polid,atoi(row[2]));
		pol_setkeywordfilter(polid,atoi(row[3]));
		pol_setsmtpaudit(polid,atoi(row[4]));
		pol_setpop3audit(polid,atoi(row[5]));
		pol_setpostaudit(polid,atoi(row[6]));
                pol_settimescope(polid,atoi(row[7]),atoi(row[8]),atoi(row[9]),atoi(row[10]),atoi(row[11]),atoi(row[12]));
	}
    
	sprintf(buf,"select proid,pass,log from proinfo where policyid =%d order by proid",polid);
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query proid error %d\n",polid);
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		pol_setpropasslog(polid,atoi(row[0]),atoi(row[1]),atoi(row[2]));
	}
	sprintf(buf,"select webid,pass,log from webinfo where policyid =%d order by webid",polid);
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query webinfo error %d\n",polid);
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		pol_setwebpasslog(polid,atoi(row[0]),atoi(row[1]),atoi(row[2]));
	}
	sprintf(buf,"select fileid,pass,log from fileinfo where policyid=%d order by fileid",polid);
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query file error %d\n",polid);
		return;
	}
	while((row = mysql_fetch_row(results))!=NULL)
	{
		pol_setfiletypepasslog(polid,atoi(row[0]),atoi(row[1]),atoi(row[2]));
	}

        sprintf(buf,"select keywordid,utf,gb,pass,log from keywordinfo where policyid=%d order by keywordid",polid);
	results = sql_query(SQL_NAME_BASE,buf);
	if(NULL == results)
	{
		DEBUG(D_FATAL)("query keywordinfo error %d\n",polid);
		return;
	}
	u32 i = 0;
	while((row = mysql_fetch_row(results))!=NULL)
	{
		pol_addkeyword(polid,i,row[2],row[1],atoi(row[0]));
		pol_setkeywordpasslog(polid,i,atoi(row[3]),atoi(row[4]));
		i++;
	}
}
void sql_readallpolicy()
{
	u32 i =0 ;
	for(i=0;i<MAX_POLICY;i++)
	{
		sql_readpolicy(i);
	}
	return;
}

/*int main(int argc,char *argv[])
{
        MYSQL_RES * results;
        results=sql_query(DB_SQL_EMAIL_FILTER);
        query_show(results);
        return 0;
}*/
