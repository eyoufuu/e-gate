#include <stdio.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <unistd.h>
#include <signal.h>
#include "serv.h"
#include "ctl.h"
#include "emp.h"
#define MAXRCVBUF 200*1500

int g_servsockfd = 0;
struct sockaddr_un g_cliaddr;
u32 g_clilen = sizeof(g_cliaddr);


void serv_sendto(const u8* buf,u32 len)
{
	if(NULL != buf)
	{
		int ret =sendto(g_servsockfd,buf,len,0,(const struct sockaddr*)&g_cliaddr,g_clilen);
		if(ret != len)
			printf("send error\n");
	}
}

void serv_parsecmd(struct sockaddr* pcliaddr,socklen_t clilen,const u8* pkt)
{
	u32 len = PKT_LEN(pkt);
	u16 cmd = PKT_CMD(pkt);
	switch(cmd)
	{
		case EVT_IP_ADD_ONE:
		{	
			TEmployee emp;
			u32 hostip = PKT_PAYLOAD_PARA1(pkt);
			u32 netip = htonl(hostip);
			u16 hash = GETIPHASH(netip);
			if(0==sql_readuserip(hostip,&emp))
			{
				emp.ip = netip;
				emp.account[0] = '\0';
				emp.activetime = 0;
				emp.groupid = 0;
				emp.personid = 0;
				emp.onpolicyid = 0;
				emp.offpolicyid = 0;
				emp.pop3 = 0;
				emp.smtp = 0;
				emp.post = 0;
				emp.webmail = 0;
				if(g_sysmode == SYS_IP)
				{
					emp.mode = SYS_IP;
				}
				else
				{
					emp.mode = SYS_ACCOUNT;
				}
			}
			
			LOCK_IP(hash);
			emp_insertipempnode(hash,&emp);
			UNLOCK_IP(hash);
		}
			break;
		case EVT_IP_MODIFY_ONE:
		{
			u32 hostip =PKT_PAYLOAD_PARA1(pkt);
			u32 netip = htonl(hostip);
			u16 hash = GETIPHASH(netip);
			
			LOCK_IP(hash);
			emp_delipempnode(hash);
			UNLOCK_IP(hash);
		}
			break;
		case EVT_IP_MODIFY_MUTI:
		{
			u32 i = 0;
			for(i=0;i<MAX_IP;i++)
			{
				LOCK_IP(i);
				emp_delipempnode(i);
				UNLOCK_IP(i);				
			}
		}			
			break;
		case EVT_POL_MODIFY:
		{
			u32 polid = PKT_PAYLOAD_PARA1(pkt);
			LOCK_POL(polid);
			sql_readpolicy(polid);
			UNLOCK_POL(polid);
		}
			break;
		case EVT_GBL_PROLOG:
		{
			u32 flag = PKT_PAYLOAD_PARA1(pkt);
			log_setprologflag(flag);
		}
			break;
		case EVT_GBL_TIME:
			sql_readglobalpara();
			break;
		case EVT_GBL_MODE:
		{
			u32 mode = PKT_PAYLOAD_PARA1(pkt);
			if(mode != g_sysmode)
			{
				u32 i = 0;
				g_sysmode = mode;
				for(i=0;i<MAX_IP;i++)
				{
					LOCK_IP(i);
					emp_delipempnode(i);
					UNLOCK_IP(i);				
				}
			}
		}			
			break;
		case EVT_CARD_MODIFY:
			sql_readcardtype();
			if_setwanlanindex();
			break;
		case EVT_INS_PRO:
		{
			u32 flag = PKT_PAYLOAD_PARA1(pkt);
			if(INS_TRA_OPEN == flag)
			{
				g_instraffic = INS_TRA_OPEN;
				//create thr to send ins pro traffic 
			}
			else
			{
				g_instraffic = INS_TRA_CLOSE;
			}
		}
			break;
		case EVT_INS_IP:
		{
			u32 flag = PKT_PAYLOAD_PARA1(pkt);
			u32 ip    = PKT_PAYLOAD_PARA2(pkt);
			if(INS_IP_OPEN == flag)
			{
				g_instraffic = INS_TRA_OPEN;
				//create thr to send pro traffic
			}
			else
			{
				g_instraffic = INS_TRA_CLOSE;
			}
		}
			break;
		case EVT_ACCOUNT_LOGIN: 
			
			break;
		case EVT_ACCOUNT_NOEXIST:
			break;
		case EVT_ACCOUNT_PASSWD:
			break;
		case EVT_ACCOUNT_LOGINOK:
			break;
		case EVT_ACCOUNT_IP:
			break;
		case EVT_ADMIN_LOGIN:
			break;
		case EVT_CLI_REGISTER:
			memcpy(&g_cliaddr,pcliaddr,clilen);
			g_clilen = clilen;
			break;
		default:
			break;
	}
}


static void dg_echo(int sockfd,struct sockaddr* pcliaddr,socklen_t clilen)
{
        int rcvbuf;
        int len;
        char msg[UNIXDG_MAXLINE];

        rcvbuf = MAXRCVBUF;
        setsockopt(sockfd,SOL_SOCKET,SO_RCVBUF,&rcvbuf,sizeof(rcvbuf));
        while(1)
        {
                len = recvfrom(sockfd,msg,UNIXDG_MAXLINE,0,pcliaddr,&clilen);
		serv_parsecmd(pcliaddr,clilen,msg);
        }
}
void serv_init()
{
	struct sockaddr_un servaddr,cliaddr;
	g_servsockfd = socket(AF_LOCAL,SOCK_DGRAM,0);
	if(g_servsockfd<0)
	{
	//	printf("socket error\n");
		DEBUG(D_FATAL)("socket error\n");
	}	
	unlink(UNIXDG_PATH);
	memset(&servaddr,0, sizeof(servaddr));
	servaddr.sun_family = AF_LOCAL;
	strcpy(servaddr.sun_path,UNIXDG_PATH);
	if(bind(g_servsockfd,(struct sockaddr*)&servaddr,sizeof(servaddr))<0)
	{
		DEBUG(D_FATAL)("bind error\n");
	//	printf("bind error\n");
	}	
	dg_echo(g_servsockfd, (struct sockaddr*)&cliaddr,sizeof(cliaddr));
}
////////////////
/*
for test
#include <pthread.h>
void* thradmin(void* para)
{
	char buf[1000]="hello";
	while(1)
	{
		serv_sendto(buf,5);
	}
}
int main()
{
	pthread_t admin;
	int err = pthread_create(&admin,NULL,thradmin,NULL);
	serv_init();
}*/
